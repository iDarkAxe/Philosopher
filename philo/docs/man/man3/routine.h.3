.TH "inc/routine.h" 3 "Philosopher" \" -*- nroff -*-
.ad l
.nh
.SH NAME
inc/routine.h
.SH SYNOPSIS
.br
.PP
\fR#include 'philo\&.h'\fP
.br

.SS "Functions"

.in +1c
.ti -1c
.RI "int \fBphilo_routine\fP (\fBt_philo\fP *philo)"
.br
.RI "Philosopher's routine\&. "
.ti -1c
.RI "void * \fBstart_routine\fP (void *ptr)"
.br
.RI "Starting point of the philosopher's thread\&. "
.ti -1c
.RI "void \fBprint_message\fP (\fBt_philo\fP *philo, enum \fBe_philo_state\fP p_state)"
.br
.RI "Print message for the state of the philosopher\&. "
.ti -1c
.RI "int \fBtry_taking_fork\fP (\fBt_philo\fP *philo, char is_left)"
.br
.RI "Try taking a fork\&. "
.ti -1c
.RI "int \fBset_back_fork\fP (\fBt_philo\fP *philo, char is_left)"
.br
.RI "Set back the fork object to not taken\&. "
.ti -1c
.RI "int \fBtry_eating\fP (\fBt_philo\fP *philo)"
.br
.RI "Try eating, if there is no time remaining, Stops it's execution and return 0\&. "
.ti -1c
.RI "int \fBhas_everyone_ate\fP (\fBt_philo\fP *philo)"
.br
.RI "Function to check if all philosophers have eaten enough\&. "
.ti -1c
.RI "void \fBphilo_died\fP (\fBt_philo\fP *philo)"
.br
.RI "Philosopher's death that sets the is_dead flag detected by the observer\&. "
.in -1c
.SH "Author"
.PP 
Generated automatically by Doxygen for Philosopher from the source code\&.
