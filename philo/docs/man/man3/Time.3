.TH "Time" 3 "Philosopher" \" -*- nroff -*-
.ad l
.nh
.SH NAME
Time \- Functions for the philosopher's timings
.PP
 \- Function used by philos to manage their timings\&.  

.SH SYNOPSIS
.br
.PP
.SS "Functions"

.in +1c
.ti -1c
.RI "size_t \fBget_time\fP (void)"
.br
.RI "Return the current time in ms\&. "
.ti -1c
.RI "size_t \fBget_dtime\fP (\fBt_philo\fP *philo)"
.br
.RI "Get the delta time since the start of the simulation\&. "
.ti -1c
.RI "void \fBft_usleep\fP (size_t wait_time, \fBt_philo\fP *philo)"
.br
.RI "Special usleep function that checks if the simulation is running during it's sleep time\&. "
.ti -1c
.RI "void \fBwait_everyone\fP (\fBt_philo\fP *philo, const int *const value1, const int *const value2)"
.br
.RI "Wait for everyone to be ready before starting the simulation\&. "
.ti -1c
.RI "int \fBdoes_have_time\fP (\fBt_philo\fP *philo, enum \fBe_philo_state\fP p_state)"
.br
.RI "Check if the philosopher has time to do something\&. "
.in -1c
.SH "Detailed Description"
.PP 
Function used by philos to manage their timings\&. 


.SH "Function Documentation"
.PP 
.SS "int does_have_time (\fBt_philo\fP * philo, enum \fBe_philo_state\fP p_state)"

.PP
Check if the philosopher has time to do something\&. 
.PP
\fBParameters\fP
.RS 4
\fIphilo\fP philosopher structure 
.br
\fIp_state\fP state of the philosopher 
.RE
.PP
\fBReturns\fP
.RS 4
int 1 if the philosopher has time, 0 otherwise 
.RE
.PP

.SS "void ft_usleep (size_t wait_time, \fBt_philo\fP * philo)"

.PP
Special usleep function that checks if the simulation is running during it's sleep time\&. 
.PP
\fBParameters\fP
.RS 4
\fIwait_time\fP time to wait in ms 
.br
\fIphilo\fP philosopher structure 
.RE
.PP

.SS "size_t get_dtime (\fBt_philo\fP * philo)"

.PP
Get the delta time since the start of the simulation\&. 
.PP
\fBParameters\fP
.RS 4
\fIphilo\fP philosopher structure 
.RE
.PP
\fBReturns\fP
.RS 4
size_t time in ms 
.RE
.PP

.SS "size_t get_time (void )"

.PP
Return the current time in ms\&. 
.PP
\fBReturns\fP
.RS 4
size_t time in ms 
.RE
.PP

.SS "void wait_everyone (\fBt_philo\fP * philo, const int *const value1, const int *const value2)"

.PP
Wait for everyone to be ready before starting the simulation\&. 
.PP
\fBParameters\fP
.RS 4
\fIphilo\fP philosopher structure 
.br
\fIvalue1\fP pointer to the value to check 
.br
\fIvalue2\fP pointer to the value to compare with 
.RE
.PP

.SH "Author"
.PP 
Generated automatically by Doxygen for Philosopher from the source code\&.
